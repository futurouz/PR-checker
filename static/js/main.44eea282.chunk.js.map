{"version":3,"sources":["Checkbox.react.js","App.js","serviceWorker.js","index.js"],"names":["Checkbox","props","react_default","a","createElement","className","name","type","onChange","onHandleCheckbox","checked","label","App","state","localization","axClassName","unitTest","e2eTest","typo","grammar","handleCheckbox","e","persist","_this","setState","prevState","Object","defineProperty","target","onCheckAllChecked","values","every","item","renderCheckboxs","lists","map","list","Checkbox_react","key","this","src","alt","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAceA,SAZE,SAAAC,GAAK,OACpBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,SACEE,KAAML,EAAMK,KACZC,KAAK,WACLC,SAAUP,EAAMQ,iBAChBC,QAAST,EAAMS,UAEhBT,EAAMU,SC2CIC,6MAhDbC,MAAQ,CACNC,cAAc,EACdT,WAAW,EACXU,aAAa,EACbC,UAAU,EACVC,SAAS,EACTC,MAAM,EACNC,SAAS,KAGXC,eAAiB,SAAAC,GACfA,EAAEC,UAEFC,EAAKC,SAAS,SAAAC,GAAS,OAAAC,OAAAC,EAAA,EAAAD,CAAA,GACpBL,EAAEO,OAAOtB,MAAQmB,EAAUJ,EAAEO,OAAOtB,YAIzCuB,kBAAoB,kBAAMH,OAAOI,OAAOP,EAAKV,OAAOkB,MAAM,SAAAC,GAAI,OAAIA,OAElEC,gBAAkB,kBAChBC,EAAMC,IAAI,SAAAC,GAAI,OACZlC,EAAAC,EAAAC,cAACiC,EAAD,CACEC,IAAKF,EAAK9B,KACVA,KAAM8B,EAAK9B,KACXK,MAAOyB,EAAKzB,MACZD,QAASa,EAAKV,MAAMuB,EAAK9B,MACzBG,iBAAkBc,EAAKH,4FAK3B,OACElB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,qCACCmC,KAAKV,oBACJ3B,EAAAC,EAAAC,cAAA,OACEoC,IAAI,uDACJC,IAAI,WAGNF,KAAKN,0BA1CGS,IAAMC,WAmDlBT,EAAQ,CACZ,CACE5B,KAAM,eACNK,MAAO,qBAET,CACEL,KAAM,YACNK,MAAO,yCAET,CACEL,KAAM,cACNK,MAAO,iCAET,CACEL,KAAM,WACNK,MAAO,wBAET,CACEL,KAAM,UACNK,MAAO,6BAET,CACEL,KAAM,OACNK,MAAO,qDAET,CACEL,KAAM,UACNK,MAAO,8CCtESiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.44eea282.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Checkbox = props => (\n  <div className=\"checklist\">\n    <input\n      name={props.name}\n      type=\"checkbox\"\n      onChange={props.onHandleCheckbox}\n      checked={props.checked}\n    />\n    {props.label}\n  </div>\n);\n\nexport default Checkbox;\n","import React from \"react\";\nimport \"./App.css\";\nimport Checkbox from \"./Checkbox.react.js\";\n\nclass App extends React.Component {\n  state = {\n    localization: false,\n    className: false,\n    axClassName: false,\n    unitTest: false,\n    e2eTest: false,\n    typo: false,\n    grammar: false\n  };\n\n  handleCheckbox = e => {\n    e.persist();\n\n    this.setState(prevState => ({\n      [e.target.name]: !prevState[e.target.name]\n    }));\n  };\n\n  onCheckAllChecked = () => Object.values(this.state).every(item => item);\n\n  renderCheckboxs = () =>\n    lists.map(list => (\n      <Checkbox\n        key={list.name}\n        name={list.name}\n        label={list.label}\n        checked={this.state[list.name]}\n        onHandleCheckbox={this.handleCheckbox}\n      />\n    ));\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h2>KN: BEFORE PULL REQUEST</h2>\n        {this.onCheckAllChecked() ? (\n          <img\n            src=\"https://media.giphy.com/media/dr6toZX3D1O8/giphy.gif\"\n            alt=\"gooooo\"\n          />\n        ) : (\n          this.renderCheckboxs()\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n\nconst lists = [\n  {\n    name: \"localization\",\n    label: \"Localization yet?\"\n  },\n  {\n    name: \"className\",\n    label: \"ClassName same as the component name?\"\n  },\n  {\n    name: \"axClassName\",\n    label: \"Ax className is that correct?\"\n  },\n  {\n    name: \"unitTest\",\n    label: \"Unit test all green?\"\n  },\n  {\n    name: \"e2eTest\",\n    label: \"Check E2E test, all pass?\"\n  },\n  {\n    name: \"typo\",\n    label: \"Check all of the words, maybe you typo somewhere.\"\n  },\n  {\n    name: \"grammar\",\n    label: \"Grammarly should help grammar, go for it.\"\n  }\n];\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}